{
    "version": "1.6.6",
    "description": "A desktop client that supports for multiple LLM providers.",
    "homepage": "https://cherry-ai.com",
    "license": "Apache-2.0",
    "architecture": {
        "64bit": {
            "url": "https://github.com/CherryHQ/cherry-studio/releases/download/v1.6.6/Cherry-Studio-1.6.6-x64-setup.exe#/dl.7z",
            "hash": "sha512:18feb4eb1e884f691b2f8a8593454f0f4d4775405db7a7a1b5385bc16b4edfa29f29549abcacaa3608aa2709e8f6d6af3e6b9958a435c4c905fd3c1f84ae7cde",
            "pre_install": "Expand-7zipArchive \"$dir\\`$PLUGINSDIR\\app-64.7z\" \"$dir\""
        },
        "arm64": {
            "url": "https://github.com/CherryHQ/cherry-studio/releases/download/v1.6.6/Cherry-Studio-1.6.6-arm64-setup.exe#/dl.7z",
            "hash": "2091399036dacca258540bec4eac5fc05201598e42328060c86f9abfdf9149b3",
            "pre_install": "Expand-7zipArchive \"$dir\\`$PLUGINSDIR\\app-arm64.7z\" \"$dir\""
        }
    },
    "shortcuts": [
        [
            "Cherry Studio.exe",
            "Cherry Studio"
        ]
    ],
    "post_install": [
        "# Clean installer leftovers (from 7zip extraction)",
        "Remove-Item \"$dir\\`$*\", \"$dir\\Uninstall*\" -Recurse",
        "",
        "$persistDir = $persist_dir",
        "function Ensure-PortableDirectory { param([string]$Path) if (-not (Test-Path $Path)) { New-Item -ItemType Directory -Path $Path -Force | Out-Null } }",
        "function New-PortableSymlink { param([string]$Link,[string]$Target) if (Test-Path $Link) { Remove-Item $Link -Force -Recurse -ErrorAction SilentlyContinue } New-Item -ItemType SymbolicLink -Path $Link -Target $Target -Force | Out-Null }",
        "$homeConfig = Join-Path $persistDir 'home\\config'",
        "$roamingDir = Join-Path $persistDir 'roaming'",
        "Ensure-PortableDirectory $homeConfig",
        "Ensure-PortableDirectory $roamingDir",
        "$legacyData = Join-Path $dir 'data'",
        "if (Test-Path $legacyData) {",
        "  $legacyRoaming = Join-Path $legacyData 'user-data'",
        "  if (Test-Path $legacyRoaming) { Copy-Item \"$legacyRoaming\\*\" $roamingDir -Force -Recurse -ErrorAction SilentlyContinue }",
        "  $legacyHome = Join-Path $legacyData 'dot-cherrystudio'",
        "  if (Test-Path $legacyHome) { Copy-Item \"$legacyHome\\*\" $homeConfig -Force -Recurse -ErrorAction SilentlyContinue }",
        "  Remove-Item $legacyData -Recurse -Force -ErrorAction SilentlyContinue",
        "}",
        "",
        "# Copy existing user data on first run",
        "if (Test-Path \"$env:AppData\\CherryStudio\") {",
        "  if (-not (Get-Item \"$env:AppData\\CherryStudio\").LinkType) { Copy-Item \"$env:AppData\\CherryStudio\\*\" $roamingDir -Force -Recurse -ErrorAction SilentlyContinue }",
        "  Remove-Item \"$env:AppData\\CherryStudio\" -Recurse -Force -ErrorAction SilentlyContinue",
        "}",
        "New-PortableSymlink (Join-Path $env:AppData 'CherryStudio') $roamingDir",
        "",
        "# Copy existing ~/.cherrystudio on first run",
        "$homeDotPath = Join-Path $env:USERPROFILE '.cherrystudio'",
        "if (Test-Path $homeDotPath) {",
        "  if (-not (Get-Item $homeDotPath).LinkType) { Copy-Item \"$homeDotPath\\*\" $homeConfig -Force -Recurse -ErrorAction SilentlyContinue }",
        "  Remove-Item $homeDotPath -Recurse -Force -ErrorAction SilentlyContinue",
        "}",
        "New-PortableSymlink $homeDotPath $homeConfig",
        "",
        "# Link system bun/uv into Cherry Studio local bin if available",
        "$csBin = Join-Path $homeConfig 'bin'",
        "Ensure-PortableDirectory $csBin",
        "",
        "# bun (do not overwrite existing)",
        "$bunCmd = Get-Command bun -ErrorAction SilentlyContinue",
        "if ($bunCmd) {",
        "  $bunTarget = $bunCmd.Source",
        "  $bunExe = Join-Path $csBin 'bun.exe'",
        "  $bunShim = Join-Path $csBin 'bun.cmd'",
        "  if ((Test-Path $bunExe) -or (Test-Path $bunShim)) {",
        "    info '[Cherry Studio] bun already present in ~/.cherrystudio/bin; skipping'",
        "  } else {",
        "    try {",
        "      New-Item -ItemType SymbolicLink -Path $bunExe -Target $bunTarget -Force | Out-Null",
        "      info \"[Cherry Studio] Linked bun -> $bunTarget\"",
        "    } catch {",
        "      warn \"[Cherry Studio] Symlink bun failed, creating shim: $_\"",
        "      $shimContent = '@echo off' + \"`n\" + '\"' + $bunTarget + '\" %*'",
        "      Set-Content -Path $bunShim -Value $shimContent -Encoding Ascii",
        "    }",
        "  }",
        "} else {",
        "  info '[Cherry Studio] bun not found in PATH; skipping link'",
        "}",
        "",
        "# uv + uvx (do not overwrite existing)",
        "$uvNames = @('uv', 'uvx', 'uvw')",
        "foreach ($name in $uvNames) {",
        "  $cmdInfo = Get-Command $name -ErrorAction SilentlyContinue",
        "  if ($cmdInfo) {",
        "    $target = $cmdInfo.Source",
        "    $exePath = Join-Path $csBin (\"$name.exe\")",
        "    $cmdPath = Join-Path $csBin (\"$name.cmd\")",
        "    if ((Test-Path $exePath) -or (Test-Path $cmdPath)) {",
        "      info \"[Cherry Studio] $name already present in ~/.cherrystudio/bin; skipping\"",
        "      continue",
        "    }",
        "    try {",
        "      New-Item -ItemType SymbolicLink -Path $exePath -Target $target -Force | Out-Null",
        "      info \"[Cherry Studio] Linked $name -> $target\"",
        "    } catch {",
        "      warn \"[Cherry Studio] Symlink $name failed, creating shim: $_\"",
        "      $shimContent = '@echo off' + \"`n\" + '\"' + $target + '\" %*'",
        "      Set-Content -Path $cmdPath -Value $shimContent -Encoding Ascii",
        "    }",
        "  } else {",
        "    info \"[Cherry Studio] $name not found in PATH; skipping link\"",
        "  }",
        "}"
    ],
    "pre_uninstall": [
        "# Clean up symbolic link",
        "$appDataPath = \"$env:AppData\\CherryStudio\"",
        "if (Test-Path $appDataPath) {",
        "  Remove-Item $appDataPath -Force",
        "  info '[Portable Mode] Removed symbolic link: %APPDATA%\\CherryStudio'",
        "}",
        "# Clean up ~/.cherrystudio symbolic link",
        "$homeDotPath = Join-Path $env:USERPROFILE '.cherrystudio'",
        "if (Test-Path $homeDotPath) {",
        "  Remove-Item $homeDotPath -Force",
        "  info '[Portable Mode] Removed symbolic link: ~/.cherrystudio'",
        "}"
    ],
    "persist": "data",
    "checkver": {
        "github": "https://github.com/CherryHQ/cherry-studio"
    },
    "autoupdate": {
        "architecture": {
            "64bit": {
                "url": "https://github.com/CherryHQ/cherry-studio/releases/download/v$version/Cherry-Studio-$version-x64-setup.exe#/dl.7z",
                "hash": {
                    "url": "$baseurl/latest.yml",
                    "regex": "sha512: $base64"
                }
            },
            "arm64": {
                "url": "https://github.com/CherryHQ/cherry-studio/releases/download/v$version/Cherry-Studio-$version-arm64-setup.exe#/dl.7z"
            }
        }
    }
}

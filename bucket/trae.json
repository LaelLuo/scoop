{
    "version": "1.0.15790",
    "description": "Trae IDE integrates seamlessly into your workflow, collaborating with you to maximize performance and efficiency.",
    "homepage": "https://www.trae.ai/",
    "license": {
        "identifier": "Proprietary",
        "url": "https://www.trae.ai/terms-of-service"
    },
    "architecture": {
        "64bit": {
            "url": "https://lf-cdn.trae.com.cn/obj/trae-com-cn/pkg/app/releases/stable/1.0.15790/win32/Trae-Setup-x64.exe",
            "hash": "7da6157504b78ff921e914bb18b21709b04d613db3a44b6ec0da9b44852fc62a"
        }
    },
    "innosetup": true,
    "extract_dir": "{code_GetDestDir}",
    "shortcuts": [
        [
            "Trae.exe",
            "Trae"
        ]
    ],
    "post_install": [
        "# Create data directories",
        "New-Item -ItemType Directory -Path \"$dir\\data\" -Force | Out-Null",
        "New-Item -ItemType Directory -Path \"$dir\\data\\user-data\" -Force | Out-Null",
        "New-Item -ItemType Directory -Path \"$dir\\data\\extensions\" -Force | Out-Null",
        "New-Item -ItemType Directory -Path \"$dir\\data\\local-programs\" -Force | Out-Null",
        "",
        "# Copy existing data if present",
        "if ((Test-Path \"$env:AppData\\Trae\") -and !(Test-Path \"$dir\\data\\user-data\\*\")) {",
        "  info '[Portable Mode] Copying existing user data...'",
        "  Copy-Item \"$env:AppData\\Trae\\*\" \"$dir\\data\\user-data\" -Recurse -Force",
        "}",
        "if ((Test-Path \"$env:USERPROFILE\\.trae\\extensions\") -and !(Test-Path \"$dir\\data\\extensions\\*\")) {",
        "  info '[Portable Mode] Copying existing extensions...'",
        "  Copy-Item \"$env:USERPROFILE\\.trae\\extensions\\*\" \"$dir\\data\\extensions\" -Recurse -Force",
        "}",
        "if ((Test-Path \"$env:LocalAppData\\Programs\\trae\") -and !(Test-Path \"$dir\\data\\local-programs\\*\")) {",
        "  info '[Portable Mode] Copying existing local programs...'",
        "  Copy-Item \"$env:LocalAppData\\Programs\\trae\\*\" \"$dir\\data\\local-programs\" -Recurse -Force",
        "}",
        "",
        "# Define paths for junction points",
        "$appDataPath = \"$env:AppData\\Trae\"",
        "$userProfilePath = \"$env:USERPROFILE\\.trae\"",
        "$localProgramsPath = \"$env:LocalAppData\\Programs\\trae\"",
        "",
        "# Remove existing directories/links if they exist",
        "if (Test-Path $appDataPath) {",
        "  if ((Get-Item $appDataPath).LinkType -in @('SymbolicLink', 'Junction')) {",
        "    Remove-Item $appDataPath -Force",
        "  } else {",
        "    warn 'Existing Trae data found at %APPDATA%\\Trae. Please backup and remove it manually for portable mode.'",
        "  }",
        "}",
        "if (Test-Path $userProfilePath) {",
        "  if ((Get-Item $userProfilePath).LinkType -in @('SymbolicLink', 'Junction')) {",
        "    Remove-Item $userProfilePath -Force",
        "  } else {",
        "    warn 'Existing Trae config found at ~/.trae. Please backup and remove it manually for portable mode.'",
        "  }",
        "}",
        "if (Test-Path $localProgramsPath) {",
        "  if ((Get-Item $localProgramsPath).LinkType -in @('SymbolicLink', 'Junction')) {",
        "    Remove-Item $localProgramsPath -Force",
        "  } else {",
        "    warn 'Existing Trae programs found at %LOCALAPPDATA%\\Programs\\trae. Please backup and remove it manually for portable mode.'",
        "  }",
        "}",
        "",
        "# Create junction points",
        "try {",
        "  New-Item -ItemType Junction -Path $appDataPath -Target \"$dir\\data\\user-data\" -Force | Out-Null",
        "  info '[Portable Mode] Created junction: %APPDATA%\\Trae -> scoop\\data\\user-data'",
        "} catch {",
        "  warn 'Failed to create junction for user data: $_'",
        "}",
        "",
        "try {",
        "  New-Item -ItemType Junction -Path $userProfilePath -Target \"$dir\\data\" -Force | Out-Null",
        "  info '[Portable Mode] Created junction: ~/.trae -> scoop\\data'",
        "} catch {",
        "  warn 'Failed to create junction for config: $_'",
        "}",
        "",
        "try {",
        "  New-Item -ItemType Junction -Path $localProgramsPath -Target \"$dir\\data\\local-programs\" -Force | Out-Null",
        "  info '[Portable Mode] Created junction: %LOCALAPPDATA%\\Programs\\trae -> scoop\\data\\local-programs'",
        "} catch {",
        "  warn 'Failed to create junction for local programs: $_'",
        "}",
        "",
        "# Adjust extensions path",
        "$extensions_file = \"$dir\\data\\extensions\\extensions.json\"",
        "if ((Test-Path \"$extensions_file\")) {",
        "  info 'Adjusting path in extensions file...'",
        "    (Get-Content \"$extensions_file\") -replace '(?<=trae(/|\\\\\\\\)).*?(?=(/|\\\\\\\\)data(/|\\\\\\\\)extensions)', $version | Set-Content \"$extensions_file\"",
        "}",
        ""
    ],
    "pre_uninstall": [
        "# Clean up junction points",
        "$appDataPath = \"$env:AppData\\Trae\"",
        "$userProfilePath = \"$env:USERPROFILE\\.trae\"",
        "$localProgramsPath = \"$env:LocalAppData\\Programs\\trae\"",
        "",
        "if (Test-Path $appDataPath) {",
        "  if ((Get-Item $appDataPath).LinkType -in @('SymbolicLink', 'Junction')) {",
        "    Remove-Item $appDataPath -Force",
        "    info '[Portable Mode] Removed junction: %APPDATA%\\Trae'",
        "  }",
        "}",
        "",
        "if (Test-Path $userProfilePath) {",
        "  if ((Get-Item $userProfilePath).LinkType -in @('SymbolicLink', 'Junction')) {",
        "    Remove-Item $userProfilePath -Force",
        "    info '[Portable Mode] Removed junction: ~/.trae'",
        "  }",
        "}",
        "",
        "if (Test-Path $localProgramsPath) {",
        "  if ((Get-Item $localProgramsPath).LinkType -in @('SymbolicLink', 'Junction')) {",
        "    Remove-Item $localProgramsPath -Force",
        "    info '[Portable Mode] Removed junction: %LOCALAPPDATA%\\Programs\\trae'",
        "  }",
        "}",
        ""
    ],
    "persist": "data",
    "checkver": {
        "url": "https://api.trae.ai/icube/api/v1/native/version/trae/latest",
        "jsonpath": "$.data.manifest.win32.download[0].x64",
        "regex": "(?<url>.*stable/(?<version>[\\d.]+)/win32.*.exe)",
        "replace": "${version}"
    },
    "autoupdate": {
        "architecture": {
            "64bit": {
                "url": "$matchUrl"
            }
        }
    }
}
